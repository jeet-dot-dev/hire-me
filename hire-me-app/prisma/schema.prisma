// ===============================
// üöÄ Prisma Generator & Datasource
// ===============================

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===============================
// üîÅ Enums
// ===============================

enum Role {
  CANDIDATE
  RECRUITER
}

enum JobType {
  Remote
  Onsite
  Hybrid
}



enum JobLevel {
  INTERN
  ENTRY
  MID
  SENIOR
  LEAD
}

enum ApplicationStatus {
  Pending
  Accepted
  Rejected
}

enum SocialPlatform {
  GITHUB
  LINKEDIN
  PORTFOLIO
  TWITTER
  DEVFOLIO
}

// ===============================
// üë• User & Authentication Models
// ===============================

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  password         String?
  role             Role       @default(CANDIDATE)
  emailVerifiedAt  DateTime?  @map("email_verified")
  emailVerified    Boolean?   @default(false)
  image            String?

  // Auth relations
  accounts         Account[]
  sessions         Session[]

  // Role-based profiles
  candidateProfile Candidate?
  recruiterProfile Recruiter?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}

// ===============================
// üßë‚Äçüíº Recruiter Side Models
// ===============================

model Recruiter {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  jobs Job[]
}

model Job {
  id                 String     @id @default(uuid())
  recruiterId        String
  recruiter          Recruiter  @relation(fields: [recruiterId], references: [id])
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  expireAt           DateTime?
  isDelete           Boolean    @default(false)

  // Job details
  jobTitle           String     @db.VarChar(100)
  companyName        String     @db.VarChar(100)
  location           String     @db.VarChar(100)
  salary             String?    @db.VarChar(100)
  jobType            JobType
  description        String
  skillsRequired     String[]
  interviewDuration  Int
  interviewInstruction String?
  tags               String[]
  status             Boolean @default(true)
  industry           String?
  jobLevel           JobLevel?
  experienceNeeded   Int?
  contact            String?
  shareLink          String?

  // Relation to Application
  jobApplication     JobApplication?
}

// ===============================
// üßë‚Äçüéì Candidate Side Models
// ===============================

model Candidate {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])

  firstName  String
  lastName   String
  about      String?
  ProfilePic String? // R2 URL
  resumeUrl  String? // R2 URL

  education  Education[]
  skills     Skill[]
  socials    SocialLink[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  JobApplication JobApplication?
}

model JobApplication {
  id           String     @id @default(uuid())
  jobId        String     @unique
  candidateId  String     @unique

  job          Job        @relation(fields: [jobId], references: [id])
  candidate    Candidate? @relation(fields: [candidateId], references: [id])

  createdAt    DateTime   @default(now())
  status       ApplicationStatus
  feedback     String?    @db.VarChar(500)
}

model Education {
  id          String    @id @default(uuid())
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  degree      String
  institution String
  startYear   Int       @db.SmallInt
  endYear     Int?      @db.SmallInt
  grade       String?
  createdAt   DateTime  @default(now())
}

model Skill {
  id          String    @id @default(uuid())
  name        String
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model SocialLink {
  id          String         @id @default(uuid())
  platform    SocialPlatform
  url         String
  candidateId String
  candidate   Candidate       @relation(fields: [candidateId], references: [id])
}
