// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  password         String?
  role             Role       @default(CANDIDATE)
  emailVerifiedAt  DateTime?  @map("email_verified")
  emailVerified    Boolean?   @default(false)
  image            String?
  accounts         Account[]
  sessions         Session[]
  candidateProfile Candidate?

  @@map("users")
}

model Candidate {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  firstName  String
  lastName   String
  about      String?
  ProfilePic String? //url uploaded to r2
  resumeUrl  String? //url uploaded to r2

  education Education[]
  skills    Skill[]
  socials   SocialLink[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Education {
  id          String   @id @default(uuid())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  degree      String
  institution String
  startYear   Int      @db.SmallInt
  endYear     Int?     @db.SmallInt
  grade       String?
  createdAt   DateTime @default(now())

}


model Skill {
  id String @id @default(uuid())
  name String
  candidate Candidate @relation(fields: [candidateId],references: [id])
  candidateId String
}
model SocialLink {
  id          String     @id @default(uuid())
  platform    SocialPlatform
  url         String
  candidate   Candidate  @relation(fields: [candidateId], references: [id])
  candidateId String
}
enum SocialPlatform {
  GITHUB
  LINKEDIN
  PORTFOLIO
  TWITTER
  DEVFOLIO
}
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}

enum Role {
  CANDIDATE
  RECRUITER
}
